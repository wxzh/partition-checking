\paragraph{Korat and SmallCheck}
Korat is a bounded-exhaustive testing tool for Java, which checks a Java predicate on all inputs from a defined space using systematic enumeration~\cite{Korat:Marinov:2005}. It exploits the fact that the predicate terminates before looking at all the parts of the value to avoid generating `equivalent' inputs, which may speed up the process dramatically. The thesis~\cite{Korat:Marinov:2005} compares this approach to one based on \emph{declarative predicates} that uses a \textsc{sat} solver, and concludes that `there is no winner'. Korat is usually faster than the other approach, but also very sensitive to the way the predicate is written. Lazy SmallCheck is an exhaustive testing tool that checks lazy Haskell predicates on all inputs from a space~\cite{SmallCheck:Runciman:2008}, avoiding generating equivalent inputs similarly to Korat.

\paragraph{Pex}
Pex uses dynamic symbolic execution to generate a small test suite of high coverage for .NET, based on a parametrised unit test, which is basically a computable property~\cite{Pex:Tillmann:2008}. Pex uses the Z3 constraint solver and a theorem prover under the hood, and performs path-bounded model-checking using a novel search strategy. (OK, I don't understand what it really does).
